// Test various language features

// Array and field operations
let arr = [1, 2, 3, 4, 5];
let obj = {x: 10, y: 20, z: 30};

// Compound assignments
arr[0] += 5;
arr[1] *= 2;
obj.x -= 3;
obj.y /= 4;

// For loop with break/continue
for let i = 0; i < 10; i += 1 {
    if i == 3 {
        continue;
    }
    if i == 7 {
        break;
    }
    print(i);
}

// Function with default parameters
fn greet(name: string = "World", times: i32 = 1) -> string {
    let result = "";
    for let i = 0; i < times; i += 1 {
        result += "Hello, " + name + "!\n";
    }
    return result;
}

// Generic function pattern
fn map<T>(arr: [T], func: fn(T) -> T) -> [T] {
    let result = [];
    for let i = 0; i < len(arr); i += 1 {
        result[i] = func(arr[i]);
    }
    return result;
}

// Main function
fn main() {
    print(greet());
    print(greet("Orizon", 2));
    
    let nums = [1, 2, 3];
    let doubled = map(nums, fn(x) -> x * 2);
    print(doubled);
}
